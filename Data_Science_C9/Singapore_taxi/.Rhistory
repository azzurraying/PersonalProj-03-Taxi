cyl8c <- fitb$coef[1] + fitb$coef[2] * 8 + fitb$coef[3] * mtcars$wt
cyl4c <- fitb$coef[1] + fitb$coef[2] * 4 + fitb$coef[3] * mtcars$wt
cyldiffc <- cyl4c - cyl8c
cyldiffc
fitb <- lm(mpg ~ cyl + wt, data = mtcars)
cyl8b <- fitb$coef[1] + fitb$coef[2] * 8 + fitb$coef[3] * mtcars$wt
cyl4b <- fitb$coef[1] + fitb$coef[2] * 4 + fitb$coef[3] * mtcars$wt
cyldiffb <- cyl4b - cyl8b
cyldiffb
fitb <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
cyl8b <- fitb$coef[1] + fitb$coef[2] * 8 + fitb$coef[3] * mtcars$wt
cyl4b <- fitb$coef[1] + fitb$coef[2] * 4 + fitb$coef[3] * mtcars$wt
cyldiffb <- cyl4b - cyl8b
cyldiffb
cyldiffa
abline(lm(mpg~factor(cyl), data = mtcars))
plot(mtcars$cyl, mtcars$mpg)
abline(lm(mpg~factor(cyl), data = mtcars), lwd = 2)
lm(mpg~factor(cyl))
lm(mpg~factor(cyl), data = mtcars)
summary(lm(mpg~factor(cyl), data = mtcars))
fita$coef
fitb <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fitb$coef
fitc <- lm(mpg ~ I(wt*0.5) + factor(cyl), data = mtcars)
fitc$coef
?mtcars
rm(fitc)
fitc <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
fitc$coef
summary(fitc)$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fite <- lm(y ~ x)
round(hatvalues(fite)[1 : 10], 3)
hatvalues(fite)
dfbeta(fite)
dfbetas(fite)
fitb
fitd
fitd <- lm(mpg ~ I(wt*0.5) + factor(cyl), data = mtcars)
fitd
airquality
?dTable
?dTable
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
library(rCharts)
?dTable
install_github("rstudio/leaflet")
install.packages("leaflet")
dev.tools::install_github("rstudio/leaflet")
devtools::install_github("rstudio/leaflet")
?%>%
%>%
m %>% 1
m <- leaflet() %>% addTiles()
install.packages("magrittr")
library(magrittr)
?%>%
%>%
? %>%
%>%
m <- leaflet() %>% addTiles()
library(leaflet)
m <- leaflet() %>% addTiles()
m
?addTiles
?gvisGeoChart
library(rCharts)
?gvisGeoChart
library(googleVis)
?gvisGeoChart
?bootstrapPage
?leafletProxy
m
library(RColorBrewer)
?renderPlot
shiny::runApp('Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project')
getwd()
setwd("Users/yingjiang/Dropbox/learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project")
setwd("/Users/yingjiang/Dropbox/learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project")
list.files()
shiny::runApp()
?absolutePanel
shiny::runApp()
list.files()
server.R
source("server.R")
shiny::runApp()
runApp()
runApp(".")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?selectInput
shiny::runApp()
shiny::runApp()
setwd("Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas")
shiny::runApp()
shiny::runApp()
?gCentroid
install.packages("rgeos")
library(rgeos)
library(sp)
shiny::runApp()
library(leaflet)
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[1]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area", inputarea, ": ", areanames[inputarea], sep=''))
shiny::runApp()
?renderLeaflet
runApp()
runApp()
runApp()
leaflet(quakes)
leaflet(quakes) %>% addTiles()
coords <- getKMLcoordinates(kmlfile = "/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/Planning_Area_Census2010.kml",
ignoreAltitude=FALSE)
areanames <- readLines("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/SGP_planning_areas.txt")
for(i in 1:length(coords)) {
#coords[[i]] <- data.frame(coords[[i]])
coords[[i]] <- coords[[i]][, 1:2]
#coords[[i]]$Area <- rep(areanames[i], nrow(coords[[i]]))
}
head(quakes)
leaflet(coords[[1]])
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area", inputarea, ": ", areanames[inputarea], sep=''))
inputarea <- as.numeric(input$areacode)
SPDF <- SpatialPointsDataFrame(coords=coords[[inputarea]], data = data.frame(coords[[inputarea]]))
SP_centroid <- gCentroid(SPDF)
inputarea <- 1
SPDF <- SpatialPointsDataFrame(coords=coords[[inputarea]], data = data.frame(coords[[inputarea]]))
SP_centroid <- gCentroid(SPDF)
# Output 1: leaflet map of SGP
output$SGPmap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area", inputarea, ": ", areanames[inputarea], sep=''))
})
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area", inputarea, ": ", areanames[inputarea], sep=''))
Samplearea <- read.table(paste("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Dataframes/taxidatabytime", inputarea, ".txt", sep=''),
sep = "\t",
colClasses = c("Date", "POSIXct", "numeric", "factor", "factor"),
skip = 1)
colnames(Samplearea) <- c("Date", "Time", "Taxi.avail", "Wday", "IsWday")
# Smoothen data
Samplearea.sm <- Samplearea
Samplearea.sm$Taxi.avail <- SMA(Samplearea$Taxi.avail, n = input$range1)
# Find peaks from smoothened data
p <- findPeaks(Samplearea.sm$Taxi.avail, thresh = input$range2)
Samplearea.sm$Taxi.avail <- SMA(Samplearea$Taxi.avail, n = 50)
# Find peaks from smoothened data
p <- findPeaks(Samplearea.sm$Taxi.avail, thresh = 0.1)
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area ", inputarea, ": ", areanames[inputarea], sep=''))
addCircles(radius = max(Samplearea$Taxi.avail), weight = 1, color = "#777777",
fillOpacity = 0.7)
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area ", inputarea, ": ", areanames[inputarea], sep='')),
addCircles(radius = max(Samplearea$Taxi.avail), weight = 1, color = "#777777",
fillOpacity = 0.7)
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area ", inputarea, ": ", areanames[inputarea], sep='')) %>%
addCircles(radius = max(Samplearea$Taxi.avail), weight = 1, color = "#777777",
fillOpacity = 0.7)
max(Samplearea$Taxi.avail)
?addCircles
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area ", inputarea, ": ", areanames[inputarea], sep='')) %>%
addCircles(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
radius = max(Samplearea$Taxi.avail), weight = 1, color = "#777777",
fillOpacity = 0.7)
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
addMarkers(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
popup = paste("Area ", inputarea, ": ", areanames[inputarea], sep='')) %>%
addCircles(as.numeric(data.frame(SP_centroid))[1],
as.numeric(data.frame(SP_centroid))[2],
radius = 10, weight = 1, color = "#777777",
fillOpacity = 0.7)
?renderLeaflet
runApp()
runApp()
runApp()
getwd()
setwd("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project_trial")
runApp()
list.files()
runApp()
setwd("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project")
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?leafletOutput
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
tri <- coords[[-26]]
length(coords)
coords[26]
inputarea <- 26
Samplearea <- read.table(paste("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Dataframes/taxidatabytime", inputarea, ".txt", sep=''),
sep = "\t",
colClasses = c("Date", "POSIXct", "numeric", "factor", "factor"),
skip = 1)
colnames(Samplearea) <- c("Date", "Time", "Taxi.avail", "Wday", "IsWday")
# Smoothen data
Samplearea.sm <- Samplearea
Samplearea.sm$Taxi.avail <- SMA(Samplearea$Taxi.avail, n = input$range1)
# Find peaks from smoothened data
p <- findPeaks(Samplearea.sm$Taxi.avail, thresh = input$range2)
Samplearea
areanames[26]
Samplearea <- read.table(paste("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Dataframes/taxidatabytime", inputarea, ".txt", sep=''),
sep = "\t",
colClasses = c("Date", "POSIXct", "numeric", "factor", "factor"),
skip = 1)
colnames(Samplearea) <- c("Date", "Time", "Taxi.avail", "Wday", "IsWday")
head(Samplearea)
getwd()
Samplearea <- read.table(paste("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Dataframes/taxidatabytime", "26", ".txt", sep=''),
sep = "\t",
colClasses = c("Date", "POSIXct", "numeric", "factor", "factor"),
skip = 1)
colnames(Samplearea) <- c("Date", "Time", "Taxi.avail", "Wday", "IsWday")
head(Samplearea)
rm(Samplearea)
Samplearea <- read.table(paste("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Dataframes/taxidatabytime", inputarea, ".txt", sep=''),
sep = "\t",
colClasses = c("Date", "POSIXct", "numeric", "factor", "factor"),
skip = 1)
colnames(Samplearea) <- c("Date", "Time", "Taxi.avail", "Wday", "IsWday")
runApp()
Samplearea <- read.table(paste("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Dataframes/taxidatabytime", inputarea, ".txt", sep=''),
sep = "\t",
#colClasses = c("Date", "POSIXct", "numeric", "factor", "factor"),
skip = 1)
colnames(Samplearea) <- c("Date", "Time", "Taxi.avail", "Wday", "IsWday")
Samplearea
tri <- coords
tri[[26]] <- NULL
length(tri)
runApp()
runApp()
?plot
runApp()
?pch
runApp()
runApp()
runApp()
runApp()
runApp()
areanames$Region <- character()
head(areanames)
unlist(areanames)
areanames <- readLines("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/SGP_planning_areas.txt")
areanames <_ as.data.frame(areanames)
areanames <- as.data.frame(areanames)
colnames(areanames)
head(areanames)
areanames$Region <- character()
areanames$Region <- character(55)
colnames(areanames) <- c("Neighborhood", "Region")
areanames$Neighborhood == "Bishan|Bukit Merah|Bukit Timah|Novena|Potong Pasir|Queenstown|Tanglin|Tiong Bahru|Toa Payoh|Southern Islands"
which(areanames$Neighborhood == "Bishan|Bukit Merah|Bukit Timah|Novena|Potong Pasir|Queenstown|Tanglin|Tiong Bahru|Toa Payoh|Southern Islands"
)
grep("Bishan|Bukit Merah|Bukit Timah|Novena|Potong Pasir|Queenstown|Tanglin|Tiong Bahru|Toa Payoh|Southern Islands", areanames$Neighborhood)
areanames$Region[grep("Bishan|Bukit Merah|Bukit Timah|Novena|Potong Pasir|Queenstown|Tanglin|Tiong Bahru|Toa Payoh|Southern Islands",
areanames$Neighborhood)] <- "Central"
areanames$Region
areanames$Region[grep("Bras Basah|Chinatown|Downtown Core|Marina Bay|Marina Centre|Marina East|Marina South|Newton|Orchard|Outram|Raffles Place|River Valley|Rochor|Tanjong Pagar",
areanames$Neighborhood)] <- "City central"
areanames$Region[grep("Bedok|Changi|Changi Bay|Changi East|Changi Village|Geylang|Kallang|Kallang Bahru|Katong|Marine Parade|Paya Lebar|Pasir Ris|Siglap|Tampines|Tampines North|Ubi",
areanames$Neighborhood)] <- "East"
areanames$Region[grep("Central Water Catchment|Lim Chu Kang|Mandai|Sembawang|Simpang|Sungei Kadut|Woodlands|Yishun",
areanames$Neighborhood)] <- "North"
areanames$Region[grep("Ang Mo Kio|Hougang|North-eastern Islands|Punggol|Seletar|Sengkang|Senoko|Serangoon|Serangoon Gardens|Serangoon North",
areanames$Neighborhood)] <- "North-east"
areanames$Region[grep("Bukit Batok|Bukit Panjang|Boon Lay|Bulim|Choa Chu Kang|Clementi|Joo Koon|Jurong East|Jurong West|Tengah|Tuas|Tuas South|Western Islands|Western Water Catchment",
areanames$Neighborhood)] <- "West"
areanames$Region
areanames$Region[5, 9, 24, 26, 39]
areanames$Region[c(5, 9, 24, 26, 39)]
areanames$Neighborhood[c(5, 9, 24, 26, 39)]
areanames$Region[grep("Bishan|Bukit Merah|Bukit Timah|Novena|Potong Pasir|Queenstown|Tanglin|Tiong Bahru|Toa Payoh|Southern Islands",
areanames$Neighborhood)] <- "Central"
areanames$Region[grep("Bras Basah|Chinatown|Downtown Core|Marina Bay|Marina Centre|Marina East|Marina South|Newton|Orchard|Outram|Raffles Place|River Valley|Rochor|Tanjong Pagar|Straits View|Singapore River|Museum",
areanames$Neighborhood)] <- "City central"
areanames$Region[grep("Bedok|Changi|Changi Bay|Changi East|Changi Village|Geylang|Kallang|Kallang Bahru|Katong|Marine Parade|Paya Lebar|Pasir Ris|Siglap|Tampines|Tampines North|Ubi",
areanames$Neighborhood)] <- "East"
areanames$Region[grep("Central Water Catchment|Lim Chu Kang|Mandai|Sembawang|Simpang|Sungei Kadut|Woodlands|Yishun",
areanames$Neighborhood)] <- "North"
areanames$Region[grep("Ang Mo Kio|Hougang|North-eastern Islands|Punggol|Seletar|Sengkang|Senoko|Serangoon|Serangoon Gardens|Serangoon North|North-Eastern Islands",
areanames$Neighborhood)] <- "North-east"
areanames$Region[grep("Bukit Batok|Bukit Panjang|Boon Lay|Bulim|Choa Chu Kang|Clementi|Joo Koon|Jurong East|Jurong West|Tengah|Tuas|Tuas South|Western Islands|Western Water Catchment|Pioneer",
areanames$Neighborhood)] <- "West"
areanames$Region
write.table(areanames,
"/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/SGP_planning_areas_reg.txt",
row.names = F,
col.names = colnames(areanames),
sep = "\t")
areanames <- read.table("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/SGP_planning_areas_reg.txt",
sep = "\t",
skip = 1)
areanames
areanames <- read.table("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/SGP_planning_areas_reg.txt",
sep = "\t",
colClasses = c("Character", "factor"),
skip = 1)
areanames <- read.table("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/SGP_planning_areas_reg.txt",
sep = "\t",
#colClasses = c("Character", "factor"),
skip = 1)
head(areanames)
?read.table
areanames <- read.table("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/SGP_planning_areas_reg.txt",
sep = "\t",
header = T)
?read.table
head(areanames)
areanames_reg <- read.table("/Users/yingjiang/Dropbox/Learnings/Stats_data/Projects/taxi_data/Planning_areas/SGP_planning_areas_reg.txt",
sep = "\t",
header = T)
areanames <- areanames_reg$Neighborhood
areanames
areanames <- as.character(areanames_reg$Neighborhood)
runApp()
?tableInput
runApp()
runApp()
library(shinyapps)
getwd()
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project")
library(rsconnect)
install.packages("rsconnect")
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('rstudio/packrat')
install.packages("packrat")
install.packages("packrat")
install.packages("rsconnect")
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project")
getwd()
setwd("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
list.files()
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
devtools::install_github('rstudio/packrat')
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
Sys.getlocale
Sys.getlocale()
shinyapps::showLogs()
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
getwd()
runApp()
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
runApp()
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyapps::deployApp("/Users/yingjiang/Dropbox/Learnings/Stats_data/Coursework/Data_science_spec/Data_science_C9/Project/Singapore_taxi")
**Help** button on the toolbar.
For more details on authoring R presentations click the **Help** button on the toolbar.
`r date()`
?date
date()
?maggitr
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2) %>%
leaflet() %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2)
inputarea
sessionInfo()
library(rCharts)
library(slidify)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
?leaflet
SPDF
ncol(SPDF)
df = data.frame(lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100))
leaflet(df) %>%
addTiles()
head(SPDF)
SPDF[2, 2]
leaflet(SPDF) %>%
addTiles()
leaflet(width = "600px", height = "400px") %>%
addTiles() %>%
addPolygons(data=coords[[inputarea]], weight=2)
coords[[1]][, 1]
coords[[1]][, 2]
df = data.frame(lat = coords[[inputarea]][, 1],
lng = coords[[inputarea]][, 2],
size = runif(100, 5, 20),
color = sample(colors(), 100))
leaflet(df) %>%
addTiles()
df = data.frame(lat = coords[[1]][, 1],
lng = coords[[1]][, 2],
size = runif(100, 5, 20),
color = sample(colors(), 100))
leaflet(df) %>%
addTiles()
inputarea <- 1
df = data.frame(lat = coords[[inputarea]][, 1],
lng = coords[[inputarea]][, 2])
leaflet(df) %>%
addTiles()
?addPolygons
leaflet() %>%
addTiles() %>%
addPolygons(lat = coords[[inputarea]][, 1], lng = coords[[inputarea]][, 2])
leaflet() %>%
addTiles() %>%
# addPolygons(lat = coords[[inputarea]][, 1], lng = coords[[inputarea]][, 2])
addPolygons(data=coords[[inputarea]], weight=2)
leaflet(width="100%", height="100%") %>%
addTiles() %>%
# addPolygons(lat = coords[[inputarea]][, 1], lng = coords[[inputarea]][, 2])
addPolygons(data=coords[[inputarea]], weight=2)
leaflet(width="100%", height="10%") %>%
addTiles() %>%
# addPolygons(lat = coords[[inputarea]][, 1], lng = coords[[inputarea]][, 2])
addPolygons(data=coords[[inputarea]], weight=2)
leaflet() %>%
addTiles() %>%
# addPolygons(lat = coords[[inputarea]][, 1], lng = coords[[inputarea]][, 2])
addPolygons(data=coords[[inputarea]], weight=2)
setwd("/Users/yingjiang/Dropbox/learnings/Stats_data/Projects/taxi_data/Taxi")
list.files()
setwd("/Users/yingjiang/Dropbox/learnings/Stats_data/Projects/taxi_data/Taxi/Data_Science_C9")
list.files()
setwd("/Users/yingjiang/Dropbox/learnings/Stats_data/Projects/taxi_data/Taxi/Data_Science_C9/Singapore_taxi")
list.files()
library(shinyapps)
shinyapps::deployApp('/Users/yingjiang/Dropbox/learnings/Stats_data/Projects/taxi_data/Taxi/Data_Science_C9/Singapore_taxi')
SPDF
SP_centroid
as.numeric(SP_centroid)
as.numeric(data.frame(SP_centroid))
sessioninfo()
sessionInfo()
map <- leaflet$new()
map$setView(as.numeric(data.frame(SP_centroid)), zoom = 13)
map$marker(as.numeric(data.frame(SP_centroid)),
bindPopup = paste("Area ", inputarea, ": ",
areanames[inputarea], sep=''))
?Leaflet
